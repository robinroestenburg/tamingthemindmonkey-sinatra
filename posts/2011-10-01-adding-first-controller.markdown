---
layout: post
title: "Adding first controller"
tags: rspec mychain
---

So far, I've not done anything yet with the frontend of the application. Tonight, I'll make a start with it and implement an initial version of the view for showing a list of cards. Beware, this post contains a lot of newbie-stuff.

### Creating the controller
First thing that I need is the controller that will take care of showing the list of cards. The controller is generated by running the following command:

~~~ text
rails generate controller Cards index
~~~

Rails generates a couple of files that I (probably) don't need - especially the view and helper specs. Actually, the Rails tutorial I watched some time ago did this, because he did not test the views and helpers separately. It will probably be good to figure out what the pros and cons are to this method (follow-up post!).

### Writing the second spec
Rails has generated the first spec for me:

~~~ ruby
require 'spec_helper'

describe CardsController do
  describe "GET 'index'" do
    it "should be successful" do
      get :index
      response.should be_success
    end
  end
end
~~~

This tests if the route is working. In this case it is, because Rails has add the following route to **config/routes.rb**:

~~~ ruby
get "cards/index"
~~~

The second spec for this controller would be the following:

~~~ ruby
before(:each) do
  first  = Factory(:card)
  second = Factory(:card)
  third  = Factory(:card)

  @cards = [first, second, third]
end

it "should have a row for each card" do
  get :index
  @cards.each do |card|
    response.should have_selector("tr td.name", :content =&gt; card.name)
  end
end
~~~

I want to show a table on this page, containing all cards. The table will have a couple of columns (which I will write a spec for later), one of them containing the name of the card. Cards are defined in the **before :each** block, this is probably something that can be improved, looks a bit ugly right now. Each card's name should be present on the page.

### Implementing the second spec
The test is failing now, as was expected:

~~~ text
1) CardsController GET 'index' should have a row for each card
   Failure/Error: response.should have_selector("tr td.name", :content =&gt; card.name)
     expected css "tr td.name" to return something
~~~

The controller action **index**, has no implementation yet. I want this action to retrieve all cards from the database for now. The view will have to loop over the result and build a table containing the information of the cards.

This should not be very difficult. Here's my implementation of the action and the view:

~~~ ruby
# app/controllers/cards_controller.rb
def index
  @cards = Card.all
end
~~~

~~~ erb
# app/views/cards/index.html.erb
<% @cards.each do |card| %>
  <table class="cards">
    <tr class="card">
      <td class="identifier"><%= card.identifier %></td>
      <td class="name"><%= card.name %></td>
    </tr>
  </table>
<% end %>
~~~

Spec is still failing, because of the same error. When I run the rails server, everything is working fine though.

### Webrat / Capybara
After searching a bit I found the cause of the problem (in the RSpec [README](https://github.com/rspec/rspec-rails) file on Github). I did not specify either the Webrat or the Capybara gem in my Gemfile. RSpec needs one of these for simulating a browser (as I'm doing here).

After adding Webrat, the previous error was replaced by the following:

~~~ text
1) CardsController GET 'index' should have a row for each card
   Failure/Error: response.should have_selector("tr td.name", :content =&gt; card.name)
     expected following output to contain a Foo tag:
~~~


### Rendering views
Pff, should RTFM before I start :) It turns out, this problem is caused by the fact that the controller specs do not render views be default. Specifying **render_views** in a group will render the views and turn the controller specs into some kind of functional tests.

After turning this on, the spec is passing - yay!

### Going further
I'm not sure about this shortcut in the controller spec allowing me to test the view through the controller. It is nicer to test the view separately, but also more work.

I'm going to look around and check out how other (web application) projects have their specs set up, maybe get some other insights.

*#033 ~ Learned some useful things, not very productive though*
